{"remainingRequest":"/home/aijan/repos/game/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aijan/repos/game/src/components/MonsterSlayer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/aijan/repos/game/src/components/MonsterSlayer.vue","mtime":1552489088321},{"path":"/home/aijan/repos/game/node_modules/cache-loader/dist/cjs.js","mtime":1549999330655},{"path":"/home/aijan/repos/game/node_modules/babel-loader/lib/index.js","mtime":1547925081538},{"path":"/home/aijan/repos/game/node_modules/cache-loader/dist/cjs.js","mtime":1549999330655},{"path":"/home/aijan/repos/game/node_modules/vue-loader/lib/index.js","mtime":1551892036365}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'Game',\n   props: {\n    \n},\ndata() {\n    return {\n    playerHealth: 100,\n    monsterHealth: 100,\n    gameIsRunning: false,\n    turns: []  \n    }\n  },\n  methods: {\n    startGame: function() {\n      this.gameIsRunning = true;\n      this.playerHealth = 100;\n      this.monsterHealth = 100;     \n    },\n    attack: function() {\n      var damage = this.calculateDamage(3,10);\n      this.monsterHealth -= damage;\n      this.turns.unshift({\n          isPlayer: true,\n          text:'Player hits Monster for' + damage\n      });\n       if (this.checkWin()) {\n         return;\n       } \n      this.monsterAttacks();     \n     },\n    specialAttack: function() {\n       this.monsterHealth -= this.calculateDamage(10,20);\n       if (this.checkWin()) {\n         return;\n       }\n       this.monsterAttacks();\n    },\n    heal: function() {\n      if (this.playerHealth <= 90) {\n        this.playerHealth += 10;\n      } else {\n        this.playerHealth = 100;\n      }\n      this.monsterAttacks();\n    },\n    giveUp: function() {\n     this.gameIsRunning =false;\n    },\n    monsterAttacks: function() {\n      var damage = this.calculateDamage(5,12);\n     this.playerHealth -= damage;\n      this.checkWin(); \n      this.turns.unshift({\n          isPlayer: false,\n          text: 'Monster hits Player for' + damage\n      });\n    },\n    calculateDamage: function(min,max) {\n      return Math.max(Math.floor(Math.random() * max) + 1, min);\n    },\n    checkWin: function() {\n      if (this.monsterHealth <= 0) {\n        if (confirm('You won! New Game?')) {\n           this.startGame();\n        } else {\n          this.gameIsRunning = false;\n        }\n        return true;\n      } else if  (this.playerHealth <= 0) {\n        if (confirm('You lost! New Game?')) {\n           this.startGame();\n         } else {\n           this.gameIsRunning = false; \n         }\n      return true;\n    }\n    return false;\n  }\n }\n}\n",{"version":3,"sources":["MonsterSlayer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MonsterSlayer.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"game\">\n   <title>Monster Slayer</title>\n  <div id=\"app\">\n    <section class=\"row\">\n      <div class=\"small-6 columns\">\n        <h1 class=\"text-center\">YOU</h1>\n        <div class=\"healthbar\">\n          <div class=\"healthbar text-center\" \n          style=\"background-color:green; margin: 0; color: white;\"\n          :style=\"{width: playerHealth + '%'}\">\n          {{ playerHealth }}\n          </div>\n        </div>\n      </div>\n      <div class=\"small-6 columns\">\n        <h1 class=\"text-center\">MONSTER</h1>\n        <div class=\"healthbar\">\n          <div class=\"healthbar text-color\"\n           style=\"background-color:green; margin: 0; color: white;\"\n           :style=\"{width: monsterHealth + '%'}\">\n           {{ monsterHealth }}\n           </div>\n         </div>\n      </div>\n    </section>\n      <section class=\"row controls\" v-if=\"!gameIsRunning\">\n      <div class=\"small-12 columns\">\n        <button id=\"start-game\" @click=\"startGame\">START NEW GAME</button>\n      </div>\n      </section>\n    <section class=\"row controls\" v-else >\n      <div class=\"small-12 columns\">\n         <button id=\"attack\" @click=\"attack\">ATTACK</button>\n         <button id=\"special-attack\" @click=\"specialAttack\">SPECIAL ATTACK</button>\n         <button id=\"heal\" @click=\"heal\">HEAL</button>\n         <button id=\"give-up\" @click=\"giveUp\">GIVE UP</button>\n      </div>\n    </section>\n    <section class=\"row log\" v-if = \"turns.length > 0\">\n      <div class=\"small-12 columns\">\n        <ul>\n          <li v-for = \"turn in turns\" :key=\"turn.id\"\n          :class=\"{'player-turn': turn.isPlayer, 'monster-turn': !turn.isPlayer}\">\n            {{ turn.text }}\n          </li>\n        </ul>\n      </div>\n    </section>\n  </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Game',\n   props: {\n    \n},\ndata() {\n    return {\n    playerHealth: 100,\n    monsterHealth: 100,\n    gameIsRunning: false,\n    turns: []  \n    }\n  },\n  methods: {\n    startGame: function() {\n      this.gameIsRunning = true;\n      this.playerHealth = 100;\n      this.monsterHealth = 100;     \n    },\n    attack: function() {\n      var damage = this.calculateDamage(3,10);\n      this.monsterHealth -= damage;\n      this.turns.unshift({\n          isPlayer: true,\n          text:'Player hits Monster for' + damage\n      });\n       if (this.checkWin()) {\n         return;\n       } \n      this.monsterAttacks();     \n     },\n    specialAttack: function() {\n       this.monsterHealth -= this.calculateDamage(10,20);\n       if (this.checkWin()) {\n         return;\n       }\n       this.monsterAttacks();\n    },\n    heal: function() {\n      if (this.playerHealth <= 90) {\n        this.playerHealth += 10;\n      } else {\n        this.playerHealth = 100;\n      }\n      this.monsterAttacks();\n    },\n    giveUp: function() {\n     this.gameIsRunning =false;\n    },\n    monsterAttacks: function() {\n      var damage = this.calculateDamage(5,12);\n     this.playerHealth -= damage;\n      this.checkWin(); \n      this.turns.unshift({\n          isPlayer: false,\n          text: 'Monster hits Player for' + damage\n      });\n    },\n    calculateDamage: function(min,max) {\n      return Math.max(Math.floor(Math.random() * max) + 1, min);\n    },\n    checkWin: function() {\n      if (this.monsterHealth <= 0) {\n        if (confirm('You won! New Game?')) {\n           this.startGame();\n        } else {\n          this.gameIsRunning = false;\n        }\n        return true;\n      } else if  (this.playerHealth <= 0) {\n        if (confirm('You lost! New Game?')) {\n           this.startGame();\n         } else {\n           this.gameIsRunning = false; \n         }\n      return true;\n    }\n    return false;\n  }\n }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n .text-center {\n   text-align: center;\n }  \n\n .healthbar {\n   width: 80%;\n   height: 40px;\n   background-color: #eee;\n   margin: auto;\n   transition: width 500ms;\n }\n\n .controls, .log {\n   margin-top:  30px;\n   text-align: center;\n   padding: 10px;\n   border: 1px solid #ccc;\n }\n\n .turn {\n   margin-top: 20px;\n   margin-bottom: 20px;\n   font-weight: bold;\n   font-size: 22px;\n }\n\n .log ul {\n   list-style: none;\n   font-weight: bold;\n   text-transform: uppercase;\n }\n\n.log ul li {\n  margin: 5px;\n} \n\n.log ul .player-turn {\n  color: blue;\n  background-color: #b6beeb;\n}\n\n.log ul .monster-turn {\n  color: red;\n  background-color: #ffc0c1;\n}\n\nbutton {\n  font-size: 20px;\n  background-color: #eee;\n  padding: 12px;\n  box-shadow: 0 1px 1px black;\n  margin: 10px;\n}\n\n#start-game {\n  background-color: #aaffb0;\n}\n\n#start-game:hover {\n  background-color: #76ff7e;\n}\n\n#attack {\n  background-color: #ff7367;\n}\n\n#attack:hover {\n  background-color: #ff3f43;\n}\n\n#special-attack {\n  background-color: #ffaf4f;\n}\n\n#special-attack:hover {\n  background-color: #ff9a2b;\n}\n\n#heal {\n  background-color: #aaffb0;\n}\n\n#heal:hover {\n  background-color: #76ff7e;\n}\n\n#give-up {\n  background-color: #ffffff;\n}\n\n#give-up:hover {\n  background-color: #c7c7c7;\n}\n</style>\n"]}]}